### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, = '0x204dc23A469E5061847762BB14a8EFc99a818EFD' const open~ $ ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/ope zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, = '0x204dc23A469E5061847762BB14a8EFc99a818EFD' const open~ $ ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/ope zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, = '0x204dc23A469E5061847762BB14a8EFc99a818EFD' const open~ $ ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/ope zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, Is this crowdsale whitelist only?                            ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoi~ $ ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, netwo~ $ ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, Is this crowdsale whitelist only?                            ### Token.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; // Main token smart contract contract EICToken is ERC20Mintable { string public constant name = "ETICoins"; string public constant symbol = "EIC"; uint8 public constant decimals = 16; } ### Crodwsale.sol pragma solidity ^0.5.8; // Imports import "../node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol"; import "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol"; import "../node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol"; contract EICCrowdsale is MintedCrowdsale, Ownable, TimedCrowdsale, RefundableCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale { constructor( ERC20Mintable _token, uint256 _rate, address payable _wallet, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _initialRate, uint256 _finalRate, uint256 _cap ) public Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) RefundableCrowdsale(_goal) IncreasingPriceCrowdsale(_initialRate, _finalRate) CappedCrowdsale(_cap) { } } ### 1_initial_migration.js const token = artifacts.require('../contracts/EICToken.sol') const crowdsale = artifacts.require('../contracts/EICCrowdsale.sol') const setDefaultAccount = require('../scripts/setDefaultAccount.js') module.exports = function(deployer, network, accounts) { const rate = new web3.BigNumber(100) const wallet = '0x204dc23A469E5061847762BB14a8EFc99a818EFD' const openingTime = (new Date('2021-02-02')).getTime/1000 const closingTime = (new Date('2021-04-02')).getTime/1000 const goal = 3500 const initialRate = 250 const finalRate = 25 const cap = 1000000 // Setup default account setDefaultAccount(web3) const account = web3.eth.accounts.pop() // Get gas limit let gasLimit = web3.eth.getBlock('latest').gasLimit let gasPrice = web3.eth.gasPrice if (process.argv[4] === '--staging') { gasPrice *= 4 } console.log(`Determined gas limit: ${gasLimit}; and gas price: ${gasPrice}; max deployment price is ${web3.fromWei(gasPrice * gasLimit, 'ether')} ETH`) // Deploy contract return deployer .then(() => { return deployer.deploy(token, { gas: gasLimit, gasPrice: gasPrice, from: account }) }) .then(() => { // Get gas limit gasLimit = web3.eth.getBlock('latest').gasLimit console.log(`Determined gas limit: ${gasLimit}; and gas price: ${gasPrice}; estimate max deployment price is ${web3.fromWei(gasPrice * gasLimit, 'ether')} ETH`) console.log('This might take a while, please, be patient') return deployer.deploy( crowdsale, token.address, rate, wallet, openingTime, closingTime, goal, initialRate, finalRate, cap, { gas: gasLimit, gasPrice: gasPrice, from: account }, ) }) .then(() => { // Make smart-contract an owner var tokenContract = web3.eth.contract(token.abi).at(token.address) tokenContract.transferOwnership(crowdsale.address) }); }
